name: 'Terraform Code Check'
on:
  - pull_request
  - push

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      WORKING_DIR: ./google
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_ACTIONS_VERSION: 0.12.29

    defaults:
      run:
        working-directory: ./google
    
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
 
    - name: Decrypt gcp credentials
  #    working-directory: ${{ env.WORKING_DIR }}
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.GCP_PASSPHRASE }}" \
        --output github_credential.json github_credential.json.gpg

    - name: create terraform.tfvars
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        cat <<EOF >terraform.tfvars
        project_id           = "${{ secrets.GCP_PROJECT_ID }}"
        bastion_members      = ${{ secrets.BASTION_MEMBERS }}
        ip_source_ranges_ssh = ${{ secrets.IP_SOURCES }}
        cluster_name         = "${{ secrets.CLUSTER_NAME }}"
        domain_name          = "${{ secrets.DOMAIN_NAME }}"
        cred_file            = "github_credential.json"
        EOF

    - name: Terraform fmt
      id: fmt
      run: terraform fmt
      continue-on-error: true
      
    - name: Terraform Init
      id: init
      run: terraform init
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

#    steps:
#      - name: 'Checkout'
#        uses: actions/checkout@master
#
#      - name: Decrypt gcp credentials
#        working-directory: ${{ env.WORKING_DIR }}
#        run: |
#          gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.GCP_PASSPHRASE }}" \
#          --output github_credential.json github_credential.json.gpg
#
#      - name: create terraform.tfvars
#        working-directory: ${{ env.WORKING_DIR }}
#        run: |
#          cat <<EOF >terraform.tfvars
#          project_id           = "${{ secrets.GCP_PROJECT_ID }}"
#          bastion_members      = ${{ secrets.BASTION_MEMBERS }}
#          ip_source_ranges_ssh = ${{ secrets.IP_SOURCES }}
#          cluster_name         = "${{ secrets.CLUSTER_NAME }}"
#          domain_name          = "${{ secrets.DOMAIN_NAME }}"
#          cred_file            = "github_credential.json"
#          EOF

 #     - name: 'Terraform Format'
 #       uses: hashicorp/setup-terraform@v1
 #       with:
 #         tf_actions_version: ${{ env.TF_ACTIONS_VERSION }}
 #         tf_actions_working_dir: ${{ env.WORKING_DIR }}
 #         tf_actions_subcommand: 'fmt'

#      - name: 'Terraform Init'
#        uses: hashicorp/setup-terraform@v1
#        with:
#          terraform_version: ${{ env.TF_ACTIONS_VERSION }}
#          tf_actions_working_dir: ${{ env.WORKING_DIR }}
#          tf_actions_subcommand: 'init'
#
#      - name: 'Terraform Validate'
#        uses: hashicorp/setup-terraform@v1
#        with:
#          tf_actions_version: ${{ env.TF_ACTIONS_VERSION }}
#          tf_actions_working_dir: ${{ env.WORKING_DIR }}
#          tf_actions_subcommand: 'validate'
#
#      - name: 'Terraform Plan'
#        uses: hashicorp/setup-terraform@v1
#        with:
#          tf_actions_version: ${{ env.TF_ACTIONS_VERSION }}
#          tf_actions_working_dir: ${{ env.WORKING_DIR }}
#          tf_actions_subcommand: 'plan'
#